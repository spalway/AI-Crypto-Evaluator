# -*- coding: utf-8 -*-
"""CryptoTracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxJms4PtfSfApFdB2wy2sJg5IdQBaBxz
"""

!pip install requests
!pip install openai
!pip install --upgrade openai
!pip show openai

from openai import OpenAI
import httpx

class CryptoAssistant:
    """A class to handle cryptocurrency information retrieval using OpenAI's API."""

    def __init__(self):
        """Initialize the CryptoAssistant with proper client configuration."""
        http_client = httpx.Client()
        self.client = OpenAI(
            api_key="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",  #Replace with your own GPT api key.
            http_client=http_client
        )

    def get_crypto_details(self, ticker: str) -> str:
        """
        Fetch cryptocurrency details using the OpenAI API.

        Args:
            ticker (str): Cryptocurrency ticker symbol (e.g., BTC, ETH)

        Returns:
            str: Formatted cryptocurrency information
        """
        prompt = f"""
        Provide information about the cryptocurrency {ticker} in exactly this format:

        Developer: "Name of the developer or team behind the coin"
        Price: "Current price of the cryptocurrency"
        Circulating Supply: "Total number of coins currently in circulation"
        Market Cap: "Market capitalization of the coin"
        Important events:
        - "Brief description of a notable event"
        - "Another key event related to the coin"

        Please ensure all responses strictly follow this format.
        """

        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a cryptocurrency assistant. Always provide information in the exact format specified."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.7
            )

            return response.choices[0].message.content

        except Exception as e:
            print(f"Detailed error: {str(e)}")  # Helpful for debugging
            raise Exception(f"Error getting crypto details: {str(e)}")

def main():
    """Main execution function with error handling."""
    print("Welcome to the Cryptocurrency Assistant!")
    print("Enter 'quit' to exit the program.")

    while True:
        ticker_symbol = input("\nEnter the cryptocurrency ticker symbol (e.g., XRP, BTC, ETH): ").strip().upper()

        if ticker_symbol.lower() == 'quit':
            print("Thank you for using the Cryptocurrency Assistant!")
            break

        try:
            assistant = CryptoAssistant()
            details = assistant.get_crypto_details(ticker_symbol)
            print("\nCrypto Details:\n")
            print(details)
        except Exception as e:
            print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()